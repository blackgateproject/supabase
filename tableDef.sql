-- /// INITIAL TABLES ///
-- Create table for admin requests, this is where the DID/VC are first stored
create table public.requests (
  id bigint generated by default as identity not null,
  wallet_addr text not null default ''::text,
  did_str text not null default ''::text,
  request_status text not null default 'pending'::text,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp without time zone null,
  usernetwork_info jsonb null default '{"ip_address": "No IP", "user_agent": "No User Agent", "location_lat": "No lat", "location_long": "No long", "user_language": "No Lang"}'::jsonb,
  requested_role text not null default 'user'::text,
  "isZKPSent" boolean not null default false,
  verifiable_cred jsonb null,
  constraint requests_pkey primary key (id),
  constraint requests_did_str_key unique (did_str),
  constraint requests_wallet_addr_key unique (wallet_addr),
  constraint requests_iszkpsent_check check (("isZKPSent" = any (array[true, false]))),
  constraint requests_request_status_check check (
    (
      request_status = any (
        array[
          'pending'::text,
          'approved'::text,
          'rejected'::text,
          'accepted'::text
        ]
      )
    )
  ),
  constraint requests_role_check check (
    (
      requested_role = any (
        array['device'::text, 'admin'::text, 'user'::text]
      )
    )
  )
) TABLESPACE pg_default;

--- Login events
create table public.login_events (
  did_str text not null,
  total_auth_duration double precision not null,
  id uuid not null default gen_random_uuid (),
  local_auth_duration double precision null,
  onchain_auth_duration double precision null,
  constraint login_events_pkey primary key (id),
  constraint login_events_did_str_check check ((did_str <> ''::text))
) TABLESPACE pg_default;


--- setup mode table
create table public.setup_state (
  id bigint generated by default as identity not null,
  is_setup_completed boolean not null default false,
  admin_did text null,
  constraint setup_state_pkey primary key (id)
) TABLESPACE pg_default;


--- Logs table
create table public.user_activity_logs (
  id bigint generated by default as identity not null,
  user_id uuid not null,
  activity text not null,
  type text not null,
  timestamp timestamp with time zone not null default now(),
  constraint user_activity_logs_pkey primary key (id),
  constraint user_activity_logs_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;


-- Proofs table
create table public.proofs (
  id bigint generated by default as identity not null,
  hash character varying not null,
  proof jsonb not null,
  constraint proofs_pkey primary key (id)
) TABLESPACE pg_default;

-- Merkle table
create table public.merkle (
  hash character varying not null,
  proofs jsonb not null,
  did text not null,
  constraint merkle_pkey primary key (did),
  constraint merkle_hash_key unique (hash)
) TABLESPACE pg_default;


-- create a view to read the auth.sessions table
create view public.sessions as
select
  sessions.id,
  sessions.user_id,
  sessions.created_at,
  sessions.updated_at,
  sessions.factor_id,
  sessions.aal,
  sessions.not_after,
  sessions.refreshed_at,
  sessions.user_agent,
  sessions.ip,
  sessions.tag
from
  auth.sessions;

-- create a view to read list of approved users, did included [WIP::]
create view public.approved_users as
select
  u.id,
  u.instance_id,
  r.wallet_addr,
  r.did_str,
  r.request_status,
  r.created_at as request_created_at,
  r.usernetwork_info,
  r.requested_role as role,
  r.updated_at as request_updated_at,
  r.verifiable_cred,
  u.created_at,
  u.updated_at,
  u.confirmed_at,
  u.invited_at,
  u.deleted_at,
  u.confirmation_token,
  u.confirmation_sent_at,
  u.recovery_token,
  u.recovery_sent_at,
  u.last_sign_in_at,
  u.raw_app_meta_data,
  u.raw_user_meta_data,
  u.is_super_admin,
  u.banned_until,
  u.reauthentication_token,
  u.reauthentication_sent_at,
  u.is_sso_user,
  u.is_anonymous
from
  auth.users u
  join requests r on jsonb_extract_path_text(u.raw_user_meta_data, variadic array['did'::text]) = r.did_str
where
  r.request_status = 'approved'::text;